<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="example.infrastructure.datasource.user.UserMapper">

    <resultMap id="user" type="example.domain.model.user.User">
        <id property="identifier.value" column="ユーザーID"/>
        <result property="name.value" column="ユーザー名"/>
        <result property="mailAddress.value" column="メールアドレス"/>
        <result property="phoneNumber.value" column="電話番号"/>
    </resultMap>

    <select id="findBy" resultMap="user">
        SELECT
            ユーザー.ユーザーID,
            ユーザー名.ユーザー名,
            ユーザーメールアドレス.メールアドレス,
            ユーザー電話番号.電話番号
        FROM 給与.ユーザー as ユーザー
          INNER JOIN 給与.ユーザー名対応表 as ユーザー名対応表 on (
            ユーザー.ユーザーID = ユーザー名対応表.ユーザーID
          ) INNER JOIN 給与.ユーザー名 as ユーザー名 on (
            ユーザー名対応表.ユーザー名ID = ユーザー名.ユーザー名ID
          ) INNER JOIN 給与.ユーザー電話番号対応表 as ユーザー電話番号対応表 on ( 
            ユーザー.ユーザーID = ユーザー電話番号対応表.ユーザーID
          ) INNER JOIN 給与.ユーザー電話番号 as ユーザー電話番号 on (
            ユーザー電話番号対応表.ユーザー電話番号ID = ユーザー電話番号.ユーザー電話番号ID
          ) INNER JOIN 給与.ユーザーメールアドレス対応表 as ユーザーメールアドレス対応表 on ( 
            ユーザー.ユーザーID = ユーザーメールアドレス対応表.ユーザーID
          ) INNER JOIN 給与.ユーザーメールアドレス as ユーザーメールアドレス on (
            ユーザーメールアドレス対応表.ユーザーメールアドレスID = ユーザーメールアドレス.ユーザーメールアドレスID
          ) LEFT OUTER JOIN 給与.削除済みユーザー as 削除済みユーザー on (
            ユーザー.ユーザーID = 削除済みユーザー.ユーザーID
          )
        WHERE ユーザー.ユーザーID = #{identifier.value} AND 削除済みユーザー.ユーザーID IS NULL
    </select>

    <select id="list" resultMap="user">
        SELECT
            ユーザー.ユーザーID,
            ユーザー名.ユーザー名,
            ユーザーメールアドレス.メールアドレス,
            ユーザー電話番号.電話番号
        FROM 給与.ユーザー as ユーザー
          INNER JOIN 給与.ユーザー名対応表 as ユーザー名対応表 on (
            ユーザー.ユーザーID = ユーザー名対応表.ユーザーID
          ) INNER JOIN 給与.ユーザー名 as ユーザー名 on (
            ユーザー名対応表.ユーザー名ID = ユーザー名.ユーザー名ID
          ) INNER JOIN 給与.ユーザー電話番号対応表 as ユーザー電話番号対応表 on (
            ユーザー.ユーザーID = ユーザー電話番号対応表.ユーザーID
          ) INNER JOIN 給与.ユーザー電話番号 as ユーザー電話番号 on (
            ユーザー電話番号対応表.ユーザー電話番号ID = ユーザー電話番号.ユーザー電話番号ID
          ) INNER JOIN 給与.ユーザーメールアドレス対応表 as ユーザーメールアドレス対応表 on (
            ユーザー.ユーザーID = ユーザーメールアドレス対応表.ユーザーID
          ) INNER JOIN 給与.ユーザーメールアドレス as ユーザーメールアドレス on (
            ユーザーメールアドレス対応表.ユーザーメールアドレスID = ユーザーメールアドレス.ユーザーメールアドレスID
          ) LEFT OUTER JOIN 給与.削除済みユーザー as 削除済みユーザー on (
            ユーザー.ユーザーID = 削除済みユーザー.ユーザーID
          )
        WHERE 削除済みユーザー.ユーザーID IS NULL
        ORDER BY ユーザー.ユーザーID;
    </select>

    <select id="newUserIdentifier" resultType="Long">
        select nextval('給与.ユーザーIDシーケンサー')
    </select>
    <insert id="registerUser">
        INSERT INTO 給与.ユーザー (ユーザーID, 登録日時) VALUES (#{userId.value}, now());
    </insert>

    <select id="newUserNameIdentifier" resultType="Long">
        select nextval('給与.ユーザー名IDシーケンサー')
    </select>
    <insert id="registerName">
        INSERT INTO 給与.ユーザー名 (ユーザー名ID, ユーザーID, ユーザー名, 登録日時)
        VALUES (#{id}, #{userId.value}, #{name.value}, now());
	</insert>

    <insert id="registerNameMapper">
        INSERT INTO 給与.ユーザー名対応表 (ユーザーID, ユーザー名ID)
        VALUES (#{userId.value}, #{nameId});
	</insert>

    <select id="newUserPhoneNumberIdentifier" resultType="Long">
        select nextval('給与.ユーザー電話番号IDシーケンサー')
    </select>
    <insert id="registerPhoneNumber">
        INSERT INTO 給与.ユーザー電話番号 (ユーザー電話番号ID, ユーザーID, 電話番号, 登録日時)
        VALUES (#{id}, #{userId.value}, #{phoneNumber.value}, now());
	</insert>

    <insert id="registerPhoneNumberMapper">
        INSERT INTO 給与.ユーザー電話番号対応表 (ユーザーID, ユーザー電話番号ID)
        VALUES (#{userId.value}, #{phoneNumberId});
	</insert>

    <select id="newUserMailAddressIdentifier" resultType="Long">
        select nextval('給与.ユーザーメールアドレスIDシーケンサー')
    </select>
    <insert id="registerMailAddress">
        INSERT INTO 給与.ユーザーメールアドレス (ユーザーメールアドレスID, ユーザーID, メールアドレス, 登録日時)
        VALUES (#{id}, #{userId.value}, #{mailAddress.value}, now());
	</insert>
	
    <insert id="registerMailAddressMapper">
        INSERT INTO 給与.ユーザーメールアドレス対応表 (ユーザーID, ユーザーメールアドレスID)
        VALUES (#{userId.value}, #{mailAddressId});
	</insert>

    <delete id="deleteNameMapper">
    	DELETE FROM 給与.ユーザー名対応表 WHERE ユーザーID = #{userId.value} 
	</delete>

    <delete id="deletePhoneNumberMapper">
    	DELETE FROM 給与.ユーザー電話番号対応表 WHERE ユーザーID = #{userId.value} 
	</delete>

    <delete id="deleteMailAddressMapper">
    	DELETE FROM 給与.ユーザーメールアドレス対応表 WHERE ユーザーID = #{userId.value} 
	</delete>

    <insert id="delete">
        INSERT INTO 給与.削除済みユーザー (ユーザーID, 登録日時)
        VALUES (#{user.identifier.value}, now());
    </insert>
</mapper>